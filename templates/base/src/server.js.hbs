import Fastify from "fastify";
import fp from "fastify-plugin";
import closeWithGrace from "close-with-grace";
import serviceApp from "./app.js";

{{#if dynamicImports}}
    import logger from "#constants/logger";
{{else}}
    import logger from "./src/constants/logger.js";
{{/if}}

{{#if (includes features "mongoose")}}
    import mongoose from "mongoose";
{{/if}}

const app = Fastify({
    logger: logger[process.env.NODE_ENV || "development"] ?? true,
    trustProxy: process.env.NODE_ENV === "production"
});

{{#if (includes features "mongoose")}}
    let connected = false;
{{/if}}

const init = async () => {
    app.register(fp(serviceApp));

    closeWithGrace(
        {
            delay: 1000,
        },
        async ({ err }) => {
            if(err != null) app.log.error(err);
            {{#if (includes features "mongoose")}}
                if(connected) {
                    await mongoose.disconnect();
                }
            {{/if}}
            await app.close();
        }
    );

    await app.ready();
    app.log.info("Plugins loaded");

    try {
        {{#if (includes features "mongoose")}}
            await mongoose.connect(process.env.MONGO_URI);
            connected = true;
            app.log.info("Connected to MongoDB");
        {{/if}}
        
        await app.listen({
            port: process.env.PORT ?? 3000,
        });
    } catch (err) {
        app.log.error(err);
        process.exit(1);
    }
}

init();